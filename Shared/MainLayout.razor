@inherits LayoutComponentBase
@inject NavigationManager NavManager
@implements IDisposable

<div class="display--flex direction--column flex--1 max-width--XXL">
	<header class="elevation-shadow--z2 display--grid columns--12 padding--XXS padding-top--SM padding-bottom--SM position--sticky top--0 background--primary text--primary-100 elevation--z5">
		<div class="span display--flex direction--row align-items--center">
			<button @onclick="OnDrawerToggle" class="icon cursor--pointer user-select--none background--transparent border--none text--inherit padding--SM shape--max background__active--primary-40">@(_drawerOpen ? "menu_open" : "menu")</button>
			<a href="index" class="user-select--none decoration--none text--inherit typo--truncate">
				<span class="typo-headline--SM padding-left--XS">BEM:aterial</span>
			</a>
		</div>
	</header>
	<div class="flex--1 display--grid columns--12 gap XXL-columns--layout">
		@if(_drawerOpen)
		{
			<aside @onclick="OnDrawerClose" class="span XXL-span--1 @_modalAnimation position--fixed XXL-position--sticky padding top--XXXL XXL-padding--none height--appbar width--stretch background--modal XXL-background--transparent elevation--z4 overflow-y--auto">
				<div @onclick:stopPropagation="true" class="@_drawerAnimation padding--XS padding-top--LG XXL-padding--none XXL-padding-top--LG gap--XXS max-width--XS height--stretch overflow-y--auto background--neutral-100 shape">
					<div class="display--grid columns--12 gap--XS align-content--start padding--XS padding-top--none margin-bottom--LG border-bottom border--neutral-80">
						<h5 class="span typo-title padding--SM margin--none">Start</h5>
						<NavLink href="index" class="display--flex direction--row gap align-items--center span user-select--none decoration--none text--primary-0 padding--SM shape--XS LG-background__hover--neutral-90 background__active--primary-80 LG-background__active--neutral-80 text__active--primary LG-text__active--neutral-0 typo--truncate" ActiveClass="background__selected--primary-90 text__selected--primary">
							<i class="icon-outlined">integration_instructions</i>
							<span class="typo-body">What is BEM:aterial?</span>
						</NavLink>
					</div>
					<div class="display--grid columns--12 gap--XS align-content--start padding--XS padding-top--none margin-bottom--LG border-bottom border--neutral-80">
						<h5 class="span typo-title padding--SM margin--none">Foundation</h5>
						<NavLink href="color-system" class="display--flex direction--row gap align-items--center span user-select--none decoration--none text--primary-0 padding--SM shape--XS LG-background__hover--neutral-90 background__active--primary-80 LG-background__active--neutral-80 text__active--primary LG-text__active--neutral-0 typo--truncate" ActiveClass="background__selected--primary-90 text__selected--primary">
							<i class="icon-outlined">palette</i>
							<span class="typo-body">Colors</span>
						</NavLink>
						<NavLink href="typography-system" class="display--flex direction--row gap align-items--center span user-select--none decoration--none text--primary-0 padding--SM shape--XS LG-background__hover--neutral-90 background__active--primary-80 LG-background__active--neutral-80 text__active--primary LG-text__active--neutral-0 typo--truncate" ActiveClass="background__selected--primary-90 text__selected--primary">
							<i class="icon-outlined">format_size</i>
							<span class="typo-body">Typography</span>
						</NavLink>
					</div>
				</div>
			</aside>	
		}
		<main class="flex--1 @(_drawerOpen ? "span XXL-span--1" : "span")">
			@Body
		</main>
	</div>
</div>


<AnchorNavigation />

@code {
	private bool _drawerOpen { get; set; } = false;
	private string _modalAnimation { get; set; } = "animation-modal--on XXL-animation--none";
	private string _drawerAnimation { get; set; } = "animation-from--left";

	private async Task OnDrawerToggle()
	{
		if(_drawerOpen)
		{
			await OnDrawerClose();
		}
		else
		{
			OnDrawerOpen();
		}
	}

	private void OnDrawerOpen() {
		_modalAnimation = "animation-modal--on XXL-animation--none";
		_drawerAnimation = "animation-from--left";
		_drawerOpen = true;
	}

	private async Task OnDrawerClose() {
		_modalAnimation = "animation-modal--off XXL-animation--none";
		_drawerAnimation = "animation-to--left";
		await Task.Delay(120);
		_drawerOpen = false;
	}

	protected override void OnInitialized()
	{
		NavManager.LocationChanged += OnLocationChanged;
		base.OnInitialized();
	}

	private void OnLocationChanged(object? src, LocationChangedEventArgs e)
	{
		_drawerOpen = false;
		StateHasChanged();
	}

	public void Dispose()
	{
		NavManager.LocationChanged -= OnLocationChanged;
	}
}
	
